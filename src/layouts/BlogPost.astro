---
import "@/styles/markdown.css";
import type { CollectionEntry } from "astro:content";
import BaseHead from "@/components/BaseHead.astro";
import FormattedDate from "@/components/FormattedDate.astro";
import BaseLayout from "./BaseLayout.astro";
import Container from "@/components/Container.astro";
import PostContentLayout from "./PostContentLayout.astro";
import PostTag from "@/components/PostTag.astro";

type Props = CollectionEntry<"blog">["data"] & { headings: string[]; postTags: CollectionEntry<"tags">[] };

const { title, description, pubDate, updatedDate, heroImage, author, postTags, headings } = Astro.props;
---

<BaseLayout>
    <Fragment slot="head">
        <BaseHead title={title} description={description} author={author} />
        <style>
            body {
                background-color: var(--color-post-bg);
            }
        </style>
    </Fragment>

    <article>
        <div class="w-full pt-56 pb-28 bg-background flex-center relative z-10">
            <div class="absolute inset-0">
                <img src="/background_desktop.webp" alt="" class="size-full opacity-10 object-cover object-center" />
            </div>
            <Container>
                <div class="w-full flex flex-col relative z-20 gap-4">
                    <span class="text-primary-200/50">
                        Published <FormattedDate date={pubDate} /> by <a href="#" class="text-primary-200">{author}</a>
                    </span>

                    <div class="w-full lg:w-2/3 flex flex-col">
                        <h1 class="text-4xl text-primary-100 mb-6 font-brand">{title}</h1>
                        <p class="text-2xl text-primary-100/80 font-normal">{description}</p>
                    </div>

                    <div class="self-start flex flex-wrap gap-2 group">
                        {postTags.filter((t) => t).map(({ data }) => <PostTag tag={data} />)}
                    </div>
                </div>
            </Container>
        </div>
        <PostContentLayout headings={headings}>
            <div class="w-full max-w-4xl lg:px-6 pb-12 rounded-xl -mt-2">
                <div class="text-gray-700">
                    {
                        heroImage && (
                            <div class="w-full aspect-video border mb-8 rounded-md">
                                <img src={heroImage} alt="" class="size-full object-center object-cover" />
                            </div>
                        )
                    }
                    <div class="w-full markdown-body font-md">
                        <slot />
                    </div>
                </div>
            </div>
        </PostContentLayout>
    </article>
</BaseLayout>

<script>
    const codeBlocks = document.querySelectorAll(".astro-code");
    codeBlocks.forEach((codeBlock) => {
        const block = codeBlock as HTMLPreElement;
        const code = block.querySelector("code");
        const snippet = block.textContent;
        const language = block.getAttribute("data-language");
        const codeBlockTools = document.createElement("div");
        codeBlockTools.classList.add("w-full", "flex", "items-center", "-mt-2", "pb-4");
        block.innerHTML = "";

        const title = document.createElement("span");
        title.classList.add("text-xs", "text-white", "opacity-50");
        title.textContent = `${language ?? "code"} snippet`;
        codeBlockTools.appendChild(title);

        const copy = document.createElement("div");
        copy.classList.add(
            "text-xs",
            "text-white",
            "opacity-50",
            "ml-auto",
            "cursor-pointer",
            "hover:opacity-100",
            "transition-opacity",
        );
        copy.textContent = "copy snippet";
        copy.addEventListener("click", (ev) => {
            ev.preventDefault();
            navigator.clipboard.writeText(snippet);
            copy.textContent = "copied!";
            copy.classList.add("!text-green-400");
            setTimeout(() => {
                copy.textContent = "copy snippet";
                copy.classList.remove("!text-green-400");
            }, 2000);
        });

        codeBlockTools.appendChild(copy);

        block.appendChild(codeBlockTools);
        block.appendChild(code);
        console.log("Text", block.textContent);
    });
</script>
