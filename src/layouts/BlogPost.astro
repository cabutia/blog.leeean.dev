---
import '@/styles/markdown.css'
import type { CollectionEntry } from 'astro:content';
import BaseHead from '@/components/BaseHead.astro';
import FormattedDate from '@/components/FormattedDate.astro';
import BaseLayout from './BaseLayout.astro';
import Container from '@/components/Container.astro';
import PostContentLayout from './PostContentLayout.astro';
import PostTag from '@/components/PostTag.astro';

type Props = CollectionEntry<'blog'>['data'] & {headings: string[]};

const { title, description, pubDate, updatedDate, heroImage, heroColor, author, tags, headings } = Astro.props;

const slugifyHeading = (str: string) => {
  return str
    .toLowerCase()                       // Make lowercase
    .trim()                              // Remove surrounding whitespace
    .replace(/[`~!@#$%^&*()+=<>?/\\|[\]{}"'.:,]/g, '') // Remove punctuation
    .replace(/\s+/g, '-')                // Replace spaces with dashes
    .replace(/-+/g, '-')                 // Remove duplicate dashes
    .replace(/^-+|-+$/g, '');            // Trim dashes from start/end
}

---

<BaseLayout>
	<Fragment slot="head">
		<BaseHead title={title} description={description} />
		<style>
			body {
				background-color: var(--color-post-bg);
			}
		</style>
	</Fragment>

	<article>
		<div class="w-full pt-56 pb-28 bg-background flex-center relative z-10">
			<div class="absolute inset-0">
				<img src="/background_desktop.webp" alt="" class="size-full opacity-10 object-cover object-center" />
				<!-- {!heroImage && !heroColor && (
					<img src="/background_desktop.webp" alt="" class="size-full opacity-10 object-cover object-center" />
				)} -->
				<!-- {heroImage && (
					<div class="size-32 absolute top-0 left-0 right-0 w-full bg-gradient-to-b from-black/40 to-transparent">
					</div>
						<img src={heroImage} class="size-full object-cover object-center"/>
				)} -->
				<!-- {!heroImage && heroColor && (
					<div class="absolute inset-0" style={`background-color: ${heroColor}`}></div>
					<div class="h-1/3 absolute bottom-0 left-0 right-0 w-full bg-gradient-to-t from-[#121212] to-transparent"></div>
				)} -->
			</div>
			<Container>
				<div class="w-full flex flex-col relative z-20 gap-4">
					<span class="text-primary-200/50">Published <FormattedDate date={pubDate} /> by <a href="#" class="text-primary-200">{author}</a></span>

					<div class={`${'w-2/3 flex flex-col'/*bg-black/20 px-12 py-8 rounded-2xl */}`}>
						<h1 class="text-4xl text-primary-100 mb-6">{title}</h1>
						<p class="text-2xl text-primary-100/80 font-normal">{description}</p>
					</div>

					<div class="self-start flex flex-wrap gap-2 group">
						{tags.map((tag) => <PostTag tag={tag}/>)}
					</div>
				</div>
			</Container>
		</div>
		<PostContentLayout>
			<div class="w-full h-full max-w-xs flex flex-col gap-4 sticky top-28">
				<h3 class="font-medium uppercase opacity-70 text-sm">In this page</h3>
				<ol class="flex flex-col gap-2 pl-4 opacity-80 group">
					{headings.map((heading, i) => (
						<li>
							<a href={`#${slugifyHeading(heading)}`}>
								<span class="opacity-50">{i + 1}. </span>{heading}
							</a>
						</li>
					))}
				</ol>
			</div>
			<div class="w-full px-6 pb-12 rounded-xl -mt-20">
				<div class="text-gray-700">
					{heroImage && (
						<div class="w-full aspect-video border mb-8 rounded-md">
							<img src={heroImage} alt="" class="size-full object-center object-cover"/>
						</div>
					)}
					<div class="w-full markdown-body font-md">
						<slot />
					</div>
				</div>
			</div>
		</PostContentLayout>
	</article>
</BaseLayout>

<script>
	const codeBlocks = document.querySelectorAll('.astro-code');
	codeBlocks.forEach((codeBlock) => {
		const block = codeBlock as HTMLPreElement
		const code = block.querySelector('code');
		const snippet = block.textContent;
		const language = block.getAttribute('data-language')
		const codeBlockTools = document.createElement('div')
		codeBlockTools.classList.add('w-full', 'flex', 'items-center' ,'-mt-2', 'pb-4')
		block.innerHTML = '';
		
		const title = document.createElement('span')
		title.classList.add('text-xs', 'text-white', 'opacity-50')
		title.textContent = `${language ?? 'code'} snippet`
		codeBlockTools.appendChild(title)

		const copy = document.createElement('div')
		copy.classList.add('text-xs', 'text-white', 'opacity-50', 'ml-auto', 'cursor-pointer', 'hover:opacity-100', 'transition-opacity')
		copy.textContent = 'copy snippet'
		copy.addEventListener('click', (ev) => {
			ev.preventDefault()
			navigator.clipboard.writeText(snippet)
			copy.textContent = 'copied!'
			copy.classList.add('!text-green-400')
			setTimeout(() => {
				copy.textContent = 'copy snippet'
				copy.classList.remove('!text-green-400')
			}, 2000)
		})

		codeBlockTools.appendChild(copy)

		block.appendChild(codeBlockTools)
		block.appendChild(code);
		console.log('Text', block.textContent)
	})
</script>